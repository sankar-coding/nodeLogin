const LocalStrategy = require('passport-local').Strategy;
const { pool } = require('./dbConfig');
const bcrypt = require('bcryptjs');

function initialize(passport) {
  const authenticateUser = async (email, password, done) => {
    try {
      const { rows } = await pool.query(`SELECT * FROM users WHERE email = $1`, [email]);

      if (rows.length > 0) {
        const user = rows[0];
        const isMatch = await bcrypt.compare(password, user.password);

        if (isMatch) {
          return done(null, user);
        } else {
          return done(null, false, { message: "Password is not correct" });
        }
      } else {
        return done(null, false, { message: "Email is not registered" });
      }
    } catch (err) {
      return done(err);
    }
  };

  passport.use(new LocalStrategy({ usernameField: "email", passwordField: "password" }, authenticateUser));

  passport.serializeUser((user, done) => done(null, user.id));
  passport.deserializeUser(async (id, done) => {
    try {
      const { rows } = await pool.query(`SELECT * FROM users WHERE id = $1`, [id]);
      return done(null, rows[0]);
    } catch (err) {
      return done(err);
    }
  });
}

module.exports = initialize;
